@page "/events"
@using BlazorWebApp.Application.DTOs
@using BlazorWebApp.Application.Interfaces
@using BlazorWebApp.Domain.Entities
@inject IEventService EventService
@inject ICategoryService CategoryService
@inject ILocationService LocationService
@inject ILogger<EventManager> Logger
@rendermode InteractiveServer

<h1>Event Management</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<EditForm Model="@newEvent" OnValidSubmit="@HandleValidSubmit" FormName="eventForm">
    <DataAnnotationsValidator />

    <div class="form-group mb-3">
        <label for="eventTitle">Event Title</label>
        <InputText id="eventTitle" @bind-Value="newEvent.Title" class="form-control" placeholder="Enter event title" />
        <ValidationMessage For="@(() => newEvent.Title)" />
    </div>

    <div class="form-group mb-3">
        <label for="eventDescription">Description (Optional)</label>
        <InputTextArea id="eventDescription" @bind-Value="newEvent.Description" class="form-control" placeholder="Enter event description" rows="3" />
        <ValidationMessage For="@(() => newEvent.Description)" />
    </div>

    <div class="row">
        <div class="col-md-6 form-group mb-3">
            <label for="eventStartDate">Start Date</label>
            <InputDate id="eventStartDate" @bind-Value="newEvent.StartDate" class="form-control" />
            <ValidationMessage For="@(() => newEvent.StartDate)" />
        </div>
        <div class="col-md-6 form-group mb-3">
            <label for="eventEndDate">End Date</label>
            <InputDate id="eventEndDate" @bind-Value="newEvent.EndDate" class="form-control" />
            <ValidationMessage For="@(() => newEvent.EndDate)" />
        </div>
    </div>

    <div class="form-group mb-3">
        <label for="eventCategory">Category</label>
        <InputSelect id="eventCategory" @bind-Value="newEvent.CategoryId" class="form-control">
            <option value="0">-- Select a category --</option>
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => newEvent.CategoryId)" />
    </div>

    <div class="form-group mb-3">
        <label for="eventLocation">Location</label>
        <InputSelect id="eventLocation" @bind-Value="newEvent.LocationId" class="form-control">
            <option value="0">-- Select a location --</option>
            @foreach (var location in locations)
            {
                <option value="@location.Id">@location.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => newEvent.LocationId)" />
    </div>

    <button type="submit" class="btn btn-primary">Add Event</button>
</EditForm>

<hr />

<h2>Existing Events</h2>

@if (isLoading)
{
    <div class="d-flex align-items-center">
        <div class="spinner-border text-primary me-2" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <em>Loading events...</em>
    </div>
}

@if (!isLoading && events.Any())
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Category</th>
                    <th>Location</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var eventItem in events)
                {
                    <tr>
                        <td>@eventItem.Title</td>
                        <td>@eventItem.StartDate.ToString("dd/MM/yyyy HH:mm")</td>
                        <td>@eventItem.EndDate.ToString("dd/MM/yyyy HH:mm")</td>
                        <td>@(eventItem.Category?.Name ?? "Not specified")</td>
                        <td>@(eventItem.Location?.Name ?? "Not specified")</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="@(() => InitiateDelete(eventItem))">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if (!isLoading && !events.Any() && string.IsNullOrEmpty(errorMessage))
{
    <p><em>No events found. Add one using the form above.</em></p>
}

@if (showDeleteConfirmation && eventToDelete != null)
{
    <div class="modal fade show" style="display: block;" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the event: <strong>@eventToDelete.Title</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Event> events = new();
    private List<Category> categories = new();
    private List<Location> locations = new();
    private EventDto newEvent = new() 
    { 
        StartDate = DateTime.Today, 
        EndDate = DateTime.Today.AddHours(1) 
    };
    private bool isLoading = false;
    private string? errorMessage = null;
    private Event? eventToDelete = null;
    private bool showDeleteConfirmation = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCategories();
            await LoadLocations();
            await LoadEvents();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error initializing page: {ex.Message}";
            Logger.LogError(ex, "Error occurred during page initialization");
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            var result = await CategoryService.GetAllCategoriesAsync();
            categories = result.ToList();
            Console.WriteLine($"Loaded {categories.Count} categories: {string.Join(", ", categories.Select(c => $"{c.Id}:{c.Name}"))}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading categories: {ex.Message}";
            Logger.LogError(ex, "Error occurred while loading categories");
        }
    }

    private async Task LoadLocations()
    {
        try
        {
            var result = await LocationService.GetAllLocationsAsync();
            locations = result.ToList();
            Console.WriteLine($"Loaded {locations.Count} locations: {string.Join(", ", locations.Select(l => $"{l.Id}:{l.Name}"))}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading locations: {ex.Message}";
            Logger.LogError(ex, "Error occurred while loading locations");
        }
    }

    private async Task LoadEvents()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var result = await EventService.GetAllEventsAsync();
            events = result.ToList();
            
            // Debug event categories
            foreach (var evt in events)
            {
                Console.WriteLine($"Event {evt.Id} ({evt.Title}) has CategoryId: {evt.CategoryId}, LocationId: {evt.LocationId}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading events: {ex.Message}";
            Logger.LogError(ex, "Error occurred while loading events");
            events.Clear();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (newEvent.EndDate <= newEvent.StartDate)
        {
            errorMessage = "End date must be after start date";
            return;
        }

        errorMessage = null;

        try
        {
            await EventService.CreateEventAsync(newEvent);
            // Reset form with default dates
            newEvent = new EventDto
            {
                StartDate = DateTime.Today,
                EndDate = DateTime.Today.AddHours(1)
            };
            await LoadEvents();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating event: {ex.Message}";
            Logger.LogError(ex, "Error occurred while creating event");
            StateHasChanged();
        }
    }

    private void InitiateDelete(Event eventItem)
    {
        eventToDelete = eventItem;
        showDeleteConfirmation = true;
        errorMessage = null;
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        if (eventToDelete == null) return;

        showDeleteConfirmation = false;
        isLoading = true;
        StateHasChanged();

        try
        {
            var success = await EventService.DeleteEventAsync(eventToDelete.Id);
            if (!success)
            {
                errorMessage = "Failed to delete event";
            }
            await LoadEvents();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting event: {ex.Message}";
            Logger.LogError(ex, "Error occurred while deleting event");
            isLoading = false;
            StateHasChanged();
        }
        finally
        {
            eventToDelete = null;
        }
    }

    private void CancelDelete()
    {
        eventToDelete = null;
        showDeleteConfirmation = false;
        StateHasChanged();
    }

    private string GetCategoryName(int categoryId)
    {
        var category = categories.FirstOrDefault(c => c.Id == categoryId);
        Console.WriteLine($"Looking up category ID {categoryId}: {(category != null ? $"Found - {category.Name}" : "Not found")}");
        
        if (category != null)
            return category.Name;
            
        // Try to load the specific category if not found in the list
        _ = LoadSpecificCategory(categoryId);
        return $"Loading... (ID: {categoryId})";
    }
    
    private async Task LoadSpecificCategory(int categoryId)
    {
        try
        {
            var category = await CategoryService.GetCategoryByIdAsync(categoryId);
            if (category != null && !categories.Any(c => c.Id == category.Id))
            {
                categories.Add(category);
                StateHasChanged(); // Refresh the UI
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading specific category {categoryId}: {ex.Message}");
        }
    }

    private string GetLocationName(int locationId)
    {
        var location = locations.FirstOrDefault(l => l.Id == locationId);
        Console.WriteLine($"Looking up location ID {locationId}: {(location != null ? $"Found - {location.Name}" : "Not found")}");
        
        if (location != null)
            return location.Name;
            
        // Try to load the specific location if not found in the list
        _ = LoadSpecificLocation(locationId);
        return $"Loading... (ID: {locationId})";
    }
    
    private async Task LoadSpecificLocation(int locationId)
    {
        try
        {
            var location = await LocationService.GetLocationByIdAsync(locationId);
            if (location != null && !locations.Any(l => l.Id == location.Id))
            {
                locations.Add(location);
                StateHasChanged(); // Refresh the UI
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading specific location {locationId}: {ex.Message}");
        }
    }
}